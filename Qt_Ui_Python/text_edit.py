# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'text_edit.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
sys.path.append("./Fonts/TruenoUltBlkIt.otf")

if __name__ == "text_edit":
    sys.path.append("./Classes")
    from class_TMString import TMString
else:
    sys.path.append("../Classes")
    from class_TMString import TMString


class Ui_text_editor(object):
    def setupUi(self, text_editor):
        text_editor.setObjectName("text_editor")
        text_editor.resize(2200, 1600)
        QtGui.QFontDatabase.addApplicationFont("./Fonts/TruenoUltBlkIt.otf")
        font = QtGui.QFont()
        font.setFamily("Trueno")
        font.setPointSize(24)
        text_editor.setFont(font)
        self.menu_bar = QtWidgets.QMenuBar(text_editor)
        self.menu_bar.setGeometry(QtCore.QRect(0, 0, 0, 0))
        self.menu_bar.setObjectName("menu_bar")
        self.menu_shortcut = QtWidgets.QMenu(self.menu_bar)
        self.menu_shortcut.setObjectName("menu_shortcut")
        self.apply_change_action = QtWidgets.QAction(text_editor)
        self.apply_change_action.setObjectName("apply_change_action")
        self.menu_shortcut.addAction(self.apply_change_action)
        self.menu_bar.addAction(self.menu_shortcut.menuAction())
        self.top_layout = QtWidgets.QVBoxLayout(text_editor)
        self.top_layout.setObjectName("top_layout")
        spacerItem = QtWidgets.QSpacerItem(20, 220, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.top_layout.addItem(spacerItem)
        self.title = QtWidgets.QLabel(text_editor)
        self.title.setMinimumSize(QtCore.QSize(0, 150))
        self.title.setMaximumSize(QtCore.QSize(999999, 150))
        font = QtGui.QFont()
        font.setPointSize(50)
        font.setUnderline(True)
        font.setWeight(50)
        self.title.setFont(font)
        self.title.setStyleSheet("background-color: rgb(0, 0, 0);\ncolor: rgb(255, 255, 255);")
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setObjectName("title")
        self.top_layout.addWidget(self.title)
        self.top_frame = QtWidgets.QFrame(text_editor)
        self.top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_frame.setObjectName("top_frame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.top_frame)
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        self.apply_change_frame = QtWidgets.QFrame(self.top_frame)
        self.apply_change_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.apply_change_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.apply_change_frame.setObjectName("apply_change_frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.apply_change_frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem3 = QtWidgets.QSpacerItem(250, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.apply_change_push_button = QtWidgets.QPushButton(self.top_frame)
        self.apply_change_push_button.setMinimumSize(QtCore.QSize(500, 80))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.apply_change_push_button.setFont(font)
        self.horizontalLayout.addWidget(self.apply_change_push_button)
        spacerItem4 = QtWidgets.QSpacerItem(277, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)
        self.verticalLayout_3.addWidget(self.apply_change_frame)

        self.input_line_edit_frame = QtWidgets.QFrame(self.top_frame)
        self.input_line_edit_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.input_line_edit_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.input_line_edit_frame.setObjectName("input_line_edit_frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.input_line_edit_frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem3 = QtWidgets.QSpacerItem(250, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.input_line_edit = QtWidgets.QLineEdit(self.input_line_edit_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_line_edit.sizePolicy().hasHeightForWidth())
        self.input_line_edit.setSizePolicy(sizePolicy)
        self.input_line_edit.setMinimumSize(QtCore.QSize(1000, 75))
        self.input_line_edit.setMaximumSize(QtCore.QSize(1000, 75))
        self.input_line_edit.setObjectName("input_line_edit")
        self.horizontalLayout.addWidget(self.input_line_edit)
        self.tm_text: TMString = TMString("")
        spacerItem4 = QtWidgets.QSpacerItem(277, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)
        self.verticalLayout_3.addWidget(self.input_line_edit_frame)
        self.output_top_frame = QtWidgets.QFrame(self.top_frame)
        self.output_top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.output_top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.output_top_frame.setObjectName("output_top_frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.output_top_frame)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem7 = QtWidgets.QSpacerItem(277, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)

        self.output_label = QtWidgets.QLabel(self.output_top_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.output_label.sizePolicy().hasHeightForWidth())
        self.output_label.setSizePolicy(sizePolicy)
        self.output_label.setMinimumSize(QtCore.QSize(1000, 75))
        self.output_label.setMaximumSize(QtCore.QSize(1000, 75))
        self.output_label.setObjectName("output_label")
        self.horizontalLayout_2.addWidget(self.output_label)

        spacerItem8 = QtWidgets.QSpacerItem(277, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem8)
        self.verticalLayout_3.addWidget(self.output_top_frame)
        self.output_text_top_frame = QtWidgets.QFrame(self.top_frame)
        self.output_text_top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.output_text_top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.output_text_top_frame.setObjectName("output_text_top_frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.output_text_top_frame)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem7 = QtWidgets.QSpacerItem(277, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        self.output_text_line_edit = QtWidgets.QLineEdit(self.output_text_top_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.output_text_line_edit.sizePolicy().hasHeightForWidth())
        self.output_text_line_edit.setSizePolicy(sizePolicy)
        self.output_text_line_edit.setMinimumSize(QtCore.QSize(1000, 75))
        self.output_text_line_edit.setMaximumSize(QtCore.QSize(1000, 75))
        self.output_text_line_edit.setObjectName("output_text_line_edit")
        self.horizontalLayout_2.addWidget(self.output_text_line_edit)
        spacerItem8 = QtWidgets.QSpacerItem(277, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem8)
        self.verticalLayout_3.addWidget(self.output_text_top_frame)
        self.top_layout.addWidget(self.top_frame)

        # Color Selector
        self.color_top_frame = QtWidgets.QFrame(text_editor)
        self.color_top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.color_top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.color_top_frame.setObjectName("color_top_frame")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.color_top_frame)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem9 = QtWidgets.QSpacerItem(260, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem9)
        self.color_picker = QtWidgets.QFrame(self.color_top_frame)
        self.color_picker.setMinimumSize(QtCore.QSize(240, 0))
        self.color_picker.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.color_picker.setFrameShadow(QtWidgets.QFrame.Raised)
        self.color_picker.setObjectName("color_picker")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.color_picker)
        self.verticalLayout_2.setContentsMargins(-1, 6, 6, 6)
        self.verticalLayout_2.setSpacing(4)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.current_color_label = QtWidgets.QLabel(self.color_picker)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.current_color_label.sizePolicy().hasHeightForWidth())
        self.current_color_label.setSizePolicy(sizePolicy)
        self.current_color_label.setMinimumSize(QtCore.QSize(0, 80))
        self.current_color_label.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.current_color_label.setObjectName("current_color_label")
        self.verticalLayout_2.addWidget(self.current_color_label)
        self.red_slider_top_frame = QtWidgets.QFrame(self.color_picker)
        self.red_slider_top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.red_slider_top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.red_slider_top_frame.setObjectName("red_slider_top_frame")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.red_slider_top_frame)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.red_slider = QtWidgets.QSlider(self.red_slider_top_frame)
        self.red_slider.setMinimumSize(QtCore.QSize(750, 40))
        self.red_slider.setMaximumSize(QtCore.QSize(750, 40))
        self.red_slider.setMaximum(15)
        self.red_slider.setOrientation(QtCore.Qt.Horizontal)
        self.red_slider.setInvertedAppearance(False)
        self.red_slider.setObjectName("red_slider")
        self.horizontalLayout_4.addWidget(self.red_slider)
        self.red_line_edit = QtWidgets.QLineEdit(self.red_slider_top_frame)
        self.red_line_edit.setMinimumSize(QtCore.QSize(80, 55))
        self.red_line_edit.setMaximumSize(QtCore.QSize(80, 55))
        self.red_line_edit.setObjectName("red_line_edit")
        font = QtGui.QFont()
        font.setPointSize(20)
        self.red_line_edit.setFont(font)
        self.red_line_edit.setAlignment(QtCore.Qt.AlignCenter)
        self.horizontalLayout_4.addWidget(self.red_line_edit)
        self.verticalLayout_2.addWidget(self.red_slider_top_frame)
        self.green_slider_top_frame = QtWidgets.QFrame(self.color_picker)
        self.green_slider_top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.green_slider_top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.green_slider_top_frame.setObjectName("green_slider_top_frame")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.green_slider_top_frame)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.green_slider = QtWidgets.QSlider(self.green_slider_top_frame)
        self.green_slider.setMinimumSize(QtCore.QSize(750, 40))
        self.green_slider.setMaximumSize(QtCore.QSize(750, 40))
        self.green_slider.setMaximum(15)
        self.green_slider.setOrientation(QtCore.Qt.Horizontal)
        self.green_slider.setObjectName("green_slider")
        self.horizontalLayout_5.addWidget(self.green_slider)
        self.green_line_edit = QtWidgets.QLineEdit(self.green_slider_top_frame)
        self.green_line_edit.setMinimumSize(QtCore.QSize(80, 55))
        self.green_line_edit.setMaximumSize(QtCore.QSize(80, 55))
        self.green_line_edit.setObjectName("green_line_edit")
        font = QtGui.QFont()
        font.setPointSize(20)
        self.green_line_edit.setFont(font)
        self.green_line_edit.setAlignment(QtCore.Qt.AlignCenter)
        self.horizontalLayout_5.addWidget(self.green_line_edit)
        self.verticalLayout_2.addWidget(self.green_slider_top_frame)
        self.blue_slider_top_frame = QtWidgets.QFrame(self.color_picker)
        self.blue_slider_top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.blue_slider_top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.blue_slider_top_frame.setObjectName("blue_slider_top_frame")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.blue_slider_top_frame)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.blue_slider = QtWidgets.QSlider(self.blue_slider_top_frame)
        self.blue_slider.setMinimumSize(QtCore.QSize(750, 40))
        self.blue_slider.setMaximumSize(QtCore.QSize(750, 40))
        self.blue_slider.setMaximum(15)
        self.blue_slider.setOrientation(QtCore.Qt.Horizontal)
        self.blue_slider.setObjectName("blue_slider")
        self.horizontalLayout_6.addWidget(self.blue_slider)
        self.blue_line_edit = QtWidgets.QLineEdit(self.blue_slider_top_frame)
        self.blue_line_edit.setMinimumSize(QtCore.QSize(80, 55))
        self.blue_line_edit.setMaximumSize(QtCore.QSize(80, 55))
        self.blue_line_edit.setObjectName("blue_line_edit")
        font = QtGui.QFont()
        font.setPointSize(20)
        self.blue_line_edit.setFont(font)
        self.blue_line_edit.setAlignment(QtCore.Qt.AlignCenter)
        self.horizontalLayout_6.addWidget(self.blue_line_edit)
        self.verticalLayout_2.addWidget(self.blue_slider_top_frame)
        self.horizontalLayout_3.addWidget(self.color_picker)

        # Format Frame
        self.format_frame = QtWidgets.QFrame(text_editor)
        self.format_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.format_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.format_frame.setObjectName("format_frame")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.format_frame)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        spacerItem12 = QtWidgets.QSpacerItem(20, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem12)
        self.left_format_frame = QtWidgets.QFrame(text_editor)
        self.left_format_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.left_format_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.left_format_frame.setObjectName("left_format_frame")
        self.verticalLayout_4 = QtWidgets.QHBoxLayout(self.left_format_frame)
        self.verticalLayout_4 = QtWidgets.QHBoxLayout(self.left_format_frame)

        # NOT WORKING PROPERLY
        self.bold_checkbox = QtWidgets.QCheckBox(self.left_format_frame)
        self.bold_checkbox.setObjectName("bold_checkbox")
        self.verticalLayout_4.addWidget(self.bold_checkbox)
        self.italic_checkbox = QtWidgets.QCheckBox(self.left_format_frame)
        self.italic_checkbox.setObjectName("italic_checkbox")
        self.verticalLayout_4.addWidget(self.italic_checkbox)
        self.wide_checkbox = QtWidgets.QCheckBox(self.left_format_frame)
        self.wide_checkbox.setObjectName("wide_checkbox")
        self.verticalLayout_4.addWidget(self.wide_checkbox)
        self.narrow_checkbox = QtWidgets.QCheckBox(self.left_format_frame)
        self.narrow_checkbox.setObjectName("narrow_checkbox")
        self.verticalLayout_4.addWidget(self.narrow_checkbox)
        self.uppercase_checkbox = QtWidgets.QCheckBox(self.left_format_frame)
        self.uppercase_checkbox.setObjectName("uppercase_checkbox")
        self.verticalLayout_4.addWidget(self.uppercase_checkbox)

        self.right_format_frame = QtWidgets.QFrame(text_editor)
        self.right_format_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.right_format_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.right_format_frame.setObjectName("right_format_frame")
        self.verticalLayout_5 = QtWidgets.QHBoxLayout(self.right_format_frame)
        self.verticalLayout_5 = QtWidgets.QHBoxLayout(self.right_format_frame)

        self.horizontalLayout_7.addWidget(self.left_format_frame)
        self.horizontalLayout_7.addWidget(self.right_format_frame)
        spacerItem13 = QtWidgets.QSpacerItem(20, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem13)
        self.top_layout.addWidget(self.format_frame)
        spacerItem10 = QtWidgets.QSpacerItem(261, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem10)
        self.top_layout.addWidget(self.color_top_frame)
        spacerItem11 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.top_layout.addItem(spacerItem11)

        self.retranslateUi(text_editor)
        QtCore.QMetaObject.connectSlotsByName(text_editor)

        self.connect_actions()

    def retranslateUi(self, text_editor):
        _translate = QtCore.QCoreApplication.translate
        text_editor.setWindowTitle(_translate("text_editor", "Form"))

        self.menu_shortcut.setTitle(_translate("text_editor", "Shortcut"))

        self.title.setText(_translate("text_editor", "Text Editor"))
        self.apply_change_push_button.setText(_translate("text_editor", "Apply Change"))
        self.apply_change_action.setShortcut(_translate("text_editor", "Ctrl+S"))
        self.output_label.setText(_translate("text_editor", "< Output test >"))
        self.bold_checkbox.setText(_translate("text_editor", "Bold"))
        self.italic_checkbox.setText(_translate("text_editor", "Italic"))
        self.wide_checkbox.setText(_translate("text_editor", "Wide"))
        self.narrow_checkbox.setText(_translate("text_editor", "Narrow"))
        self.uppercase_checkbox.setText(_translate("text_editor", "Uppercase"))
        self.red_line_edit.setText(_translate("text_editor", "0"))
        self.green_line_edit.setText(_translate("text_editor", "0"))
        self.blue_line_edit.setText(_translate("text_editor", "0"))

    def connect_actions(self):
        self.apply_change_push_button.clicked.connect(self.apply_change_push_button_clicked)
        self.apply_change_action.triggered.connect(self.apply_change_push_button_clicked)
        self.last_input_text = ""
        self.input_line_edit.textEdited.connect(self.input_edited)

        self.red_line_edit.textEdited.connect(lambda: self.set_color_slider("red"))
        self.green_line_edit.textEdited.connect(lambda: self.set_color_slider("green"))
        self.blue_line_edit.textEdited.connect(lambda: self.set_color_slider("blue"))

        self.red_slider.valueChanged.connect(lambda: self.set_color_line_edit("red"))
        self.green_slider.valueChanged.connect(lambda: self.set_color_line_edit("green"))
        self.blue_slider.valueChanged.connect(lambda: self.set_color_line_edit("blue"))

    def input_edited(self):
        new_input_text = self.input_line_edit.text()
        new_len = len(new_input_text)
        old_len = len(self.last_input_text)
        if new_len > old_len:
            if old_len == 0 and new_len == 1:
                self.tm_text.append_character(new_input_text)
            else:
                for index in range(new_len):
                    new_character = new_input_text[index]
                    old_character = self.last_input_text[index]
                    if new_character != old_character:
                        self.tm_text.insert_character(index, new_character)
                        break
                    elif index == old_len - 1:
                        self.tm_text.append_character(new_input_text[-1])
                        break

        elif new_len < old_len:
            for index in range(old_len):
                new_character = new_input_text[index]
                old_character = self.last_input_text[index]
                if new_character != old_character:
                    del self.tm_text.string_info[index]
                    break
                elif index == new_len - 1:
                    del self.tm_text.string_info[index + 1]
                    break

        self.last_input_text = new_input_text
        self.tm_text.reset_output()
        self.reset_output()

    def reset_output(self):
        self.output_text_line_edit.setText(self.tm_text.output_unclean)

    def apply_change_push_button_clicked(self):
        start_selection = self.input_line_edit.selectionStart()
        end_selection = self.input_line_edit.selectionEnd()

        current_red = self.str_int_to_str_hex(self.red_line_edit.text())
        current_green = self.str_int_to_str_hex(self.green_line_edit.text())
        current_blue = self.str_int_to_str_hex(self.blue_line_edit.text())

        current_color = f"${current_red}{current_green}{current_blue}"
        self.tm_text.color(current_color, start_selection, end_selection)

        self.reset_output()

    @staticmethod
    def str_int_to_str_hex(string):
        if string.isdigit():
            num_hex = hex(int(string))
            str_hex = str(num_hex)[-1]

            return str_hex

    def set_color_line_edit(self, color: str):
        match color:
            case "red":
                num_red: str = str(self.red_slider.sliderPosition())
                self.red_line_edit.setText(num_red)

            case "green":
                num_green: str = str(self.green_slider.sliderPosition())
                self.green_line_edit.setText(num_green)

            case "blue":
                num_blue: str = str(self.blue_slider.sliderPosition())
                self.blue_line_edit.setText(num_blue)
            case _:
                return None

        self.set_color_display()

    def set_color_display(self):
        red = self.short_hex_to_rgb(self.red_line_edit.text())
        green = self.short_hex_to_rgb(self.green_line_edit.text())
        blue = self.short_hex_to_rgb(self.blue_line_edit.text())

        self.current_color_label.setStyleSheet(f"background-color: rgb({red}, {green}, {blue});")

    @staticmethod
    def short_hex_to_rgb(string: str):
        if string.isdigit():
            number = int(string)

            if number <= 0:
                return 0

            elif number >= 15:
                return 255

            else:
                return number * 16 + number

        return 0

    def set_color_slider(self, color: str):
        match color:
            case "red":
                str_red = self.red_line_edit.text()
                num_red: int = int(str_red) if str_red.isdigit() else 0
                self.red_slider.setSliderPosition(num_red)

            case "green":
                str_green = self.green_line_edit.text()
                num_green: int = int(str_green) if str_green.isdigit() else 0
                self.green_slider.setSliderPosition(num_green)

            case "blue":
                str_blue = self.blue_line_edit.text()
                num_blue: int = int(str_blue) if str_blue.isdigit() else 0
                self.blue_slider.setSliderPosition(num_blue)

    @staticmethod
    def _main():
        import sys
        app = QtWidgets.QApplication(sys.argv)
        text_edit = QtWidgets.QWidget()
        ui_text_edit = Ui_text_editor()
        ui_text_edit.setupUi(text_edit)
        text_edit.show()
        sys.exit(app.exec_())


if __name__ == '__main__':
    Ui_text_editor._main()

# TODO: Give Preview
# TODO: Give clean output
# TODO: Apply Format actions / buttons

# Bugs:
# Erase many character with selected text doesn't register
# Crash if there is no character in the input_line
